"difficulty level validation"
enum level{
  Beginner
  Intermediate
  Expert
}


type Course {
  _id: ID!
  title: String!
  teacher: String
  description: String!
  topic: String
  people: [Student]
  level: level
}

type Student {
  _id: ID!
  name: String!
  email: String!
}

type Query {
  "Return all courses"
  getCourses: [Course]
  
  "return a single course"
  getCourse(id: ID!): Course
  
  "Return all Students"
  getStudents: [Student]
  
  "return a single Student"
  getStudent(id: ID!): Student
}

input CourseInput{
  title: String!
  teacher: String
  description: String!
  topic: String
  level: level
}

input CourseEditInput{
  title: String
  teacher: String
  description: String
  topic: String
}

input StudentInput{
  name: String!
  email: String!
}

input StudentEditInput{
  name: String
  email: String
}

type Mutation {
  "Create course"
  createCourse(input: CourseInput!): Course
  "Edit course"
  editCourse(_id: ID!, input: CourseEditInput!): Course
  "Delete course"
  deleteCourse(_id: ID!): Course
  "Create student"
  createStudent(input: StudentInput!): Student
  "Edit student"
  editStudent(_id: ID!,  input: StudentEditInput!): Student
  "Delete student"
  deleteStudent(_id: ID!): Student
  "Add to person to a course"
  addPeople(courseID: ID!, personID: ID!): Course
}